"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/sketch",{

/***/ "./src/pages/classes/Level.tsx":
/*!*************************************!*\
  !*** ./src/pages/classes/Level.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Level; }\n/* harmony export */ });\n/* harmony import */ var _Tile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tile */ \"./src/pages/classes/Tile.tsx\");\n\nconst DEBUG = true;\nclass Level {\n    createLayout() {\n        for(let i = 0; i < this.rows; i++){\n            let row = [];\n            for(let j = 0; j < this.cols; j++){\n                // get the code for the current tile\n                let code = this.rawLayout[i * this.cols + j];\n                let image;\n                // use the appropriate image for the tile based on its code\n                switch(code){\n                    case \"gra\":\n                        image = this.images[0];\n                        break;\n                    case \"dir\":\n                        image = this.images[1];\n                        break;\n                    case \"coi\":\n                        image = this.images[2];\n                        break;\n                    case \"gem\":\n                        image = this.images[3];\n                        break;\n                    case \"cll\":\n                        image = this.images[4];\n                        break;\n                    case \"clr\":\n                        image = this.images[5];\n                        break;\n                    case \"flo\":\n                        image = this.images[6];\n                        break;\n                    case \"psm\":\n                        image = this.images[7];\n                        break;\n                    case \"pbd\":\n                        image = this.images[8];\n                        break;\n                    case \"pbu\":\n                        image = this.images[9];\n                        break;\n                    case \"tsm\":\n                        image = this.images[10];\n                        break;\n                    case \"tbd\":\n                        image = this.images[11];\n                        break;\n                    case \"tbu\":\n                        image = this.images[12];\n                        break;\n                    case \"sto\":\n                        image = this.images[13];\n                        break;\n                    case \"spi\":\n                        image = this.images[14];\n                        break;\n                    case \"000\":\n                        image = this.images[15];\n                        break;\n                    default:\n                        image = this.images[16];\n                        break;\n                }\n                // create a new tile with the code and image\n                let tile = new _Tile__WEBPACK_IMPORTED_MODULE_0__[\"default\"](code, image, this.p);\n                row.push(tile);\n            }\n            // add the row of tiles to the layout\n            this.layout.push(row);\n        }\n    }\n    draw(xOffset, yOffset, debug) {\n        this.p.push();\n        this.p.noStroke();\n        this.p.fill(\"lightskyblue\");\n        // draw the background of the level\n        this.p.rect(xOffset, yOffset, this.levelWidth, this.levelHeight);\n        this.p.pop();\n        // draw each tile in the layout\n        for(let i = 0; i < this.rows; i++){\n            for(let j = 0; j < this.cols; j++){\n                let x = xOffset + j * this.tile_size;\n                let y = yOffset + i * this.tile_size;\n                let tile = this.layout[i][j];\n                tile.draw(x, y, this.tile_size, debug);\n            }\n        }\n    }\n    constructor(rows, cols, rawlayout, tile_size, images, p){\n        this.handleCollisions = (player, xOffset, yOffset)=>{\n            // calculate the player's bounding box\n            let playerLeft = player.x;\n            let playerRight = player.x + player.width;\n            let playerTop = player.y;\n            let playerBottom = player.y + player.height;\n            // add the player's velocity to their position\n            let newPlayerLeft = playerLeft + player.vx;\n            let newPlayerRight = playerRight + player.vx;\n            let newPlayerTop = playerTop + player.vy;\n            let newPlayerBottom = playerBottom + player.vy;\n            let tileLeft;\n            let tileRight;\n            let tileTop;\n            let tileBottom;\n            // loop through the grid array and check for collisions\n            for(let i = 0; i < this.rows; i++){\n                for(let j = 0; j < this.cols; j++){\n                    switch(this.layout[i][j].code){\n                        case \"gra\":\n                        case \"sto\":\n                            // calculate the bounding box of the tile with a buffer \n                            tileLeft = xOffset + j * this.tile_size;\n                            tileRight = xOffset + (j + 1) * this.tile_size;\n                            tileTop = yOffset + i * this.tile_size;\n                            tileBottom = yOffset + (i + 1) * this.tile_size;\n                            // check if the player's bounding box overlaps with the tile's bounding box\n                            if (newPlayerLeft < tileRight && newPlayerRight > tileLeft && newPlayerTop < tileBottom && newPlayerBottom > tileTop) {\n                                let overlapLeft = Math.max(newPlayerLeft, tileLeft);\n                                let overlapRight = Math.min(newPlayerRight, tileRight);\n                                let overlapTop = Math.max(newPlayerTop, tileTop);\n                                let overlapBottom = Math.min(newPlayerBottom, tileBottom);\n                                let overlapWidth = overlapRight - overlapLeft;\n                                let overlapHeight = overlapBottom - overlapTop;\n                                // determine the direction of the collision\n                                let direction;\n                                //DEBUG\n                                if (DEBUG) console.log(\"OW: \" + overlapWidth);\n                                if (DEBUG) console.log(\"OH: \" + overlapHeight);\n                                if (DEBUG) console.log(\"Nya\");\n                                if (DEBUG) console.log(\"\");\n                                if (overlapWidth < overlapHeight) {\n                                    direction = overlapLeft - 10 < newPlayerLeft ? \"left\" : \"right\";\n                                } else {\n                                    direction = overlapTop < newPlayerTop - 10 ? \"up\" : \"down\";\n                                }\n                                // adjust the player's position based on the overlap and direction of the collision\n                                switch(direction){\n                                    case \"left\":\n                                        if (DEBUG) console.log(\"Nya\");\n                                        player.x += overlapWidth - player.vx;\n                                        break;\n                                    case \"right\":\n                                        if (DEBUG) console.log(\"Goode\");\n                                        player.x -= overlapWidth - player.vx;\n                                        break;\n                                    case \"up\":\n                                        if (DEBUG) console.log(\"Bure\");\n                                        player.y += overlapHeight - player.vy;\n                                        break;\n                                    case \"down\":\n                                        player.y -= overlapHeight - player.vy;\n                                        player.jumps = 2;\n                                        player.vy = 0; // reset the player's vertical velocity\n                                        break;\n                                }\n                            }\n                            break;\n                        case \"spi\":\n                            // calculate the bounding box of the tile\n                            tileLeft = xOffset + j * this.tile_size;\n                            tileRight = xOffset + (j + 1) * this.tile_size;\n                            tileTop = yOffset + i * this.tile_size + 0.28 * this.tile_size;\n                            tileBottom = yOffset + (i + 1) * this.tile_size;\n                            // check if the player's bounding box overlaps with the tile's bounding box\n                            if (newPlayerLeft < tileRight && newPlayerRight > tileLeft && newPlayerTop < tileBottom && newPlayerBottom > tileTop) {\n                                // there is a collision!\n                                // reset the player's position to their previous position\n                                let overlapLeft = Math.max(newPlayerLeft, tileLeft);\n                                let overlapRight = Math.min(newPlayerRight, tileRight);\n                                let overlapTop = Math.max(newPlayerTop, tileTop);\n                                let overlapBottom = Math.min(newPlayerBottom, tileBottom);\n                                let overlapWidth = overlapRight - overlapLeft;\n                                let overlapHeight = overlapBottom - overlapTop;\n                                // determine the direction of the collision\n                                let direction;\n                                if (overlapWidth < overlapHeight) {\n                                    direction = overlapLeft < newPlayerLeft ? \"left\" : \"right\";\n                                } else {\n                                    direction = overlapTop < newPlayerTop ? \"up\" : \"down\";\n                                }\n                                // adjust the player's position based on the overlap and direction of the collision\n                                switch(direction){\n                                    case \"left\":\n                                        player.x += overlapWidth - player.vx;\n                                        break;\n                                    case \"right\":\n                                        player.x -= overlapWidth - player.vx;\n                                        break;\n                                    case \"up\":\n                                        player.y += overlapHeight - player.vy;\n                                        break;\n                                    case \"down\":\n                                        player.y -= overlapHeight - player.vy;\n                                        player.vy = 0; // reset the player's vertical velocity\n                                        break;\n                                }\n                                /* Death triggers */ player.isAlive = false;\n                            }\n                            break;\n                        case \"coi\":\n                        case \"gem\":\n                            // calculate the center and radius of the ellipse\n                            let centerX = xOffset + j * this.tile_size + this.tile_size * 0.5;\n                            let centerY = yOffset + i * this.tile_size + this.tile_size * 0.5;\n                            let radiusX = this.tile_size * 0.35;\n                            let radiusY = this.tile_size * 0.35;\n                            // check if the player's bounding box overlaps with the tile's ellipse\n                            if (playerLeft < centerX + radiusX && playerRight > centerX - radiusX && playerTop < centerY + radiusY && playerBottom > centerY - radiusY) {\n                                this.layout[i][j].code = \"000\";\n                                this.layout[i][j].image = this.images[15];\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n        };\n        this.rows = rows;\n        this.cols = cols;\n        this.rawLayout = rawlayout;\n        this.tile_size = tile_size;\n        this.layout = [];\n        this.p = p;\n        this.images = images;\n        this.levelWidth = this.cols * this.tile_size;\n        this.levelHeight = this.rows * this.tile_size;\n        // create the layout\n        this.createLayout();\n    }\n}\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pages/classes/Level.tsx\n"));

/***/ })

});